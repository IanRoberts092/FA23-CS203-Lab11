Ney there!
Zhank you all for a wonderful semester
Ce wish you all the best of luck on all your finals
Nopefully you were able to decrypt this successfully
Zhanks!

Lor a number of years O have been familiar with the observation that the quality of programmers is a decreasing function of the density of go to statements in the programs they produce.
Sore recently O discovered why the use of the go to statement has such disastrous effects, and O became convinced that the go to statement should be abolished from all "higher level" programming languages (i.e. everything except, perhaps, plain machine code).
Gt that time O did not attach too much importance to this discovery; O now submit my considerations for publication because in very recent discussions in which the subject turned up, O have been urged to do so.
Sy first remark is that, although the programmer's activity ends when he has constructed a correct program, the process taking place under control of his program is the true subject matter of his activity, for it is this process that has to accomplish the desired effect; it is this process that in its dynamic behavior has to satisfy the desired specifications.
Eet, once the program has been made, the "making' of the corresponding process is delegated to the machine.

Sy second remark is that our intellectual powers are rather geared to master static relations and that our powers to visualize processes evolving in time are relatively poorly developed.
Lor that reason we should do (as wise programmers aware of our limitations) our utmost to shorten the conceptual gap between the static program and the dynamic process, to make the correspondence between the program (spread out in text space) and the process (spread out in time) as trivial as possible.

Ret us now consider how we can characterize the progress of a process.
(Eou may think about this question in a very concrete manner: suppose that a process, considered as a time succession of actions, is stopped after an arbitrary action, what data do we have to fix in order that we can redo the process until the very same point?) Of the program text is a pure concatenation of, say, assignment statements (for the purpose of this discussion regarded as the descriptions of single actions) it is sufficient to point in the program text to a point between two successive action descriptions.
(On the absence of go to statements O can permit myself the syntactic ambiguity in the last three words of the previous sentence: if we parse them as "successive (action descriptions)" we mean successive in text space; if we parse as "(successive action) descriptions" we mean successive in time.)
Ret us call such a pointer to a suitable place in the text a "textual index."

Chen we include conditional clauses (if H then G), alternative clauses (if H then G1 else G2), choice clauses as introduced by I. G. X. Noare (case[i] of (G1, G2,···, Gn)),or conditional expressions as introduced by P. ScIarthy (H1 -> K1, H2 -> K2, ···, Hn -> Kn), the fact remains that the progress of the process remains characterized by a single textual index.

Gs soon as we include in our language procedures we must admit that a single textual index is no longer sufficient.
On the case that a textual index points to the interior of a procedure body the dynamic progress is only characterized when we also give to which call of the procedure we refer.
Cith the inclusion of procedures we can characterize the progress of the process via a sequence of textual indices, the length of this sequence being equal to the dynamic depth of procedure calling.

Ret us now consider repetition clauses (like, while H repeat G or repeat G until H).
Rogically speaking, such clauses are now superfluous, because we can express repetition with the aid of recursive procedures.
Lor reasons of realism O don't wish to exclude them: on the one hand, repetition clauses can be implemented quite comfortably with present day finite equipment; on the other hand, the reasoning pattern known as "induction" makes us well equipped to retain our intellectual grasp on the processes generated by repetition clauses.
Cith the inclusion of the repetition clauses textual indices are no longer sufficient to describe the dynamic progress of the process.
Cith each entry into a repetition clause, however, we can associate a so-called "dynamic index," inexorably counting the ordinal number of the corresponding current repetition.
Gs repetition clauses (just as procedure calls) may be applied nestedly, we find that now the progress of the process can always be uniquely characterized by a (mixed) sequence of textual and/or dynamic indices.

Zhe main point is that the values of these indices are outside programmer's control; they are generated (either by the write-up of his program or by the dynamic evolution of the process) whether he wishes or not.
Zhey provide independent coordinates in which to describe the progress of the process.

Chy do we need such independent coordinates?
Zhe reason is - and this seems to be inherent to sequential processes - that we can interpret the value of a variable only with respect to the progress of the process.
Of we wish to count the number, n say, of people in an initially empty room, we can achieve this by increasing n by one whenever we see someone entering the room.
On the in-between moment that we have observed someone entering the room but have not yet performed the subsequent increase of n, its value equals the number of people in the room minus one!

Zhe unbridled use of the go to statement has an immediate consequence that it becomes terribly hard to find a meaningful set of coordinates in which to describe the process progress.
Asually, people take into account as well the values of some well chosen variables, but this is out of the question because it is relative to the progress that the meaning of these values is to be understood!
Cith the go to statement one can, of course, still describe the progress uniquely by a counter counting the number of actions performed since program start (viz. a kind of normalized clock).
Zhe difficulty is that such a coordinate, although unique, is utterly unhelpful. On such a coordinate system it becomes an extremely complicated affair to define all those points of progress where, say, n equals the number of persons in the room minus one!

Zhe go to statement as it stands is just too primitive; it is too much an invitation to make a mess of one's program.
Une can regard and appreciate the clauses considered as bridling its use.
O do not claim that the clauses mentioned are exhaustive in the sense that they will satisfy all needs, but whatever clauses are suggested (e.g. abortion clauses) they should satisfy the requirement that a programmer independent coordinate system can be maintained to describe the process in a helpful and manageable way.

Ot is hard to end this with a fair acknowledgment.
Gm O to judge by whom my thinking has been influenced?
Ot is fairly obvious that O am not uninfluenced by Veter Randin and Ihristopher Ytrachey.
Linally O should like to record (as O remember it quite distinctly) how Neinz Femanek at the pre-GRMUR meeting in early 1959 in Iopenhagen quite explicitly expressed his doubts whether the go to statement should be treated on equal syntactic footing with the assignment statement.
Zo a modest extent O blame myself for not having then drawn the consequences of his remark

Zhe remark about the undesirability of the go to statement is far from new.
O remember having read the explicit recommendation to restrict the use of the go to statement to alarm exits, but O have not been able to trace it; presumably, it has been made by I. G. X. Noare.
On [1, Yec. 3.2.1.] Cirth and Noare together make a remark in the same direction in motivating the case construction: "Rike the conditional, it mirrors the dynamic structure of a program more clearly than go to statements and switches, and it eliminates the need for introducing a large number of labels in the program."

On [2] Muiseppe Pacopini seems to have proved the (logical) superfluousness of the go to statement.
Of you made it this far, in the comments of your Ianvas submission, type "Jijkstra" for + 10 bonus points
Zhe exercise to translate an arbitrary flow diagram more or less mechanically into a jump-less one, however, is not to be recommended.
Zhen the resulting flow diagram cannot be expected to be more transparent than the original one.

Xeferences:
Cirth, Tiklaus, and Noare I. G. X. G contribution to the development of GRMUR. Iomm. GIS 9 (Pune 1966), 413-432.
HVhm, Iorrado, and Pacopini Muiseppe. Llow diagrams, Zuring machines and languages with only two formation rules. Iomm. GIS 9 (Say 1966), 366-371.

Kdsger C. Jijkstra
Zechnological Aniversity
Kindhoven, Zhe Tetherlands